---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import ArrowCard from "@components/ArrowCard.astro";
import Button from "@components/Button.astro";
import type { GetStaticPaths } from "astro";

export const getStaticPaths: GetStaticPaths = async () => {
  const [allTags, allPosts] = await Promise.all([
    getCollection('tags'),
    getCollection("blog")
  ]);

  return allTags.map((tagEntry) => ({
    params: { tag: tagEntry.id },
    props: { 
      tagData: tagEntry.data,
      posts: allPosts.filter(post => post.data.tags?.includes(tagEntry.id))
    }
  }));
};

interface Props {
  tagData: CollectionEntry<"tags">["data"];
  posts: CollectionEntry<"blog">[];
}

const { tag } = Astro.params;
const { tagData, posts } = Astro.props;

const allTags = await getCollection('tags');

type Acc = {
  [year: string]: CollectionEntry<"blog">[];
}

const postsByYear = posts.reduce((acc: Acc, post) => {
  const year = post.data.date.getFullYear().toString();
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(post);
  return acc;
}, {});

const years = Object.keys(postsByYear).sort((a, b) => parseInt(b) - parseInt(a));
---
<PageLayout title={tagData.name} description={tagData.description || `Posts tagged with ${tagData.name}`}>
  <Container>
    <div class="space-y-10">
      <div class="animate font-semibold text-black dark:text-white">
        {tagData.name}
      </div>
      <div class="animate">
        <div>
          Tags<br /><br />
          <Button 
            text="All" 
            href="/blog" 
            class={`mr-2 ${!tag ? 'bg-gray-200 dark:bg-gray-700' : ''}`}
          />
          {allTags.map((t) => (
            <Button 
              text={t.data.name} 
              href={`/tags/${t.id}`} 
              class={`mr-2 ${t.id === tag ? 'bg-gray-200 dark:bg-gray-700' : ''}`}
            />
          ))}
        </div>
      </div>
      <div class="space-y-4">
        {years.map(year => (
          <section class="animate space-y-4">
            <div class="font-semibold text-black dark:text-white">
              {year}
            </div>
            <div>
              <ul class="flex flex-col gap-4">
                {
                  postsByYear[year].map((post) => (
                    <li>
                      <ArrowCard entry={post}/>
                    </li>
                  ))
                }
              </ul>
            </div>
          </section>
        ))}
      </div>
    </div>
  </Container>
</PageLayout>
